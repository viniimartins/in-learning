generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid())
  name      String?
  email     String  @unique
  avatarUrl String? @map("avatar_url")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  account          Account[]
  instructorCourse Course[]
  students         Student[]
  progress         Progress[]

  @@map("users")
}

enum AccountProvider {
  GITHUB
}

model Account {
  id                String          @id @default(uuid())
  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@unique([provider, userId])
  @@map("accounts")
}

model Course {
  id          String @id @default(uuid())
  title       String
  slug        String
  subtitle    String
  description String

  studentCount Int @default(0) @map("student_count")

  instructor   User   @relation(fields: [instructorId], references: [id])
  instructorId String @map("instructor_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  lessons  Lesson[]
  students Student[]
  progress Progress[]

  @@map("courses")
}

model Lesson {
  id       String @id @default(uuid())
  title    String
  videoUrl String @map("video_url")

  course   Course @relation(fields: [courseId], references: [id])
  courseId String @map("course_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("lessons")
}

model Student {
  course   Course @relation(fields: [courseId], references: [id])
  courseId String @map("course_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([userId, courseId])
  @@map("students")
}

model Progress {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String @map("course_id")

  completed Boolean @default(false)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, courseId])
  @@map("progress")
}
